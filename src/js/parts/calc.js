import { exchangeRates } from './exchangerates.js';

const giveSelect = document.querySelector('.give-exchange select');
const receiveSelect = document.querySelector('.receive-exchange select');

const giveInput = document.querySelector('.give-exchange input');
const receiveInput = document.querySelector('.receive-exchange input');

const calcToggle = document.querySelector('.calc__toggle');
const calcAdd = document.querySelector('.calc__add');
const calcCourses = document.querySelector('.calc__courses');

let debounceTimeout;

//* –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–µ–±–∞—É–Ω—Å—ñ–Ω–≥—É (–∑–∞—Ç—Ä–∏–º–∫–∞) –æ–±—á–∏—Å–ª–µ–Ω—å
function debounceCalculation(callback) {
  clearTimeout(debounceTimeout);
  debounceTimeout = setTimeout(callback, 300);
}

//... –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É –ø–æ—Ä–æ–≥—É regular –¥–ª—è USDT –∫—Ä–æ—Å-–∫—É—Ä—Å—ñ–≤
function getRegularTierName(amountInUsd) {
  if (amountInUsd <= 1000) return 'below_1k';
  if (amountInUsd <= 5000) return 'between_1k_5k';
  return 'above_5k';
}

//*
function parseValue(input) {
  return parseFloat(input.value.replace(',', '.')) || 0;
}

//* –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑–Ω–∞—á–µ–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–æ–≥–æ –≤ —ñ–Ω–ø—É—Ç
function formatInputValue(input) {
  let value = input.value.replace(/[^0-9.]/g, ''); // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ñ —Å–∏–º–≤–æ–ª–∏, –æ–∫—Ä—ñ–º –∫—Ä–∞–ø–∫–∏

  const parts = value.split('.'); // –†–æ–∑–¥—ñ–ª—è—î–º–æ –Ω–∞ —Ü—ñ–ª—É —Ç–∞ –¥—Ä–æ–±–æ–≤—É —á–∞—Å—Ç–∏–Ω—É
  // –Ø–∫—â–æ –±—ñ–ª—å—à–µ –¥–≤–æ—Ö –∫—Ä–∞–ø–æ–∫, —Ç–æ –∑'—î–¥–Ω—É—î–º–æ —ó—Ö
  if (parts.length > 2) {
    value = parts[0] + '.' + parts.slice(1).join('');
  }

  if (parts.length === 2) {
    parts[1] = parts[1].slice(0, 2);
    value = parts.join('.');
  }

  input.value = value;
}

//... –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä—è–º–æ–≥–æ –∞–±–æ –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å—É –¥–ª—è –≤–∞–ª—é—Ç–Ω–æ—ó –ø–∞—Ä–∏
function getRate(from, to, tier, operation, usdAmount) {
  const pair = `${from}_${to}`;
  const reversePair = `${to}_${from}`;
  const isUsdt = from === 'USDT' || to === 'USDT';

  if (isUsdt && pair === 'USDT_UAH') {
    if (tier.UAH === 'same_usd') {
      const usdUahRate =
        exchangeRates.regular[getRegularTierName(usdAmount)][`USD-W_UAH`][
          operation
        ];
      return usdUahRate;
    }
    if (tier.UAH === 'cross') {
      const usdtToUsd = tier[`USD-W`][operation];
      const usdToUah =
        exchangeRates.regular[getRegularTierName(usdAmount)][`USD-W_UAH`][
          operation
        ];
      return usdtToUsd * usdToUah;
    }
  }
  if (isUsdt && pair === 'UAH_USDT') {
    if (tier.UAH === 'same_usd') {
      const usdToUah =
        exchangeRates.regular[getRegularTierName(usdAmount)][`USD-W_UAH`][
          operation === 'buy' ? 'sell' : 'buy'
        ];
      return 1 / usdToUah;
    }
    if (tier.UAH === 'cross') {
      const usdToUah =
        exchangeRates.regular[getRegularTierName(usdAmount)][`USD-W_UAH`][
          operation === 'buy' ? 'sell' : 'buy'
        ];
      const usdToUsdt = tier[`USD-W`][operation === 'buy' ? 'sell' : 'buy'];
      return 1 / usdToUah / usdToUsdt;
    }
  }

  // if (isUsdt && (from === 'USDT' || to === 'USDT')) {
  //   // –û–±–º—ñ–Ω USDT <-> USD-W –∞–±–æ USD-B
  //   const usdPair = from === 'USDT' ? `${to}` : `${from}`;
  //   if (tier[usdPair]) {
  //     const rate = tier[usdPair][operation];
  //     return from === 'USDT' ? rate : 1 / rate;
  //   }
  // }

  if (tier[pair]) {
    return tier[pair][operation];
  }

  if (tier[reversePair]) {
    return 1 / tier[reversePair][operation === 'buy' ? 'sell' : 'buy'];
  }

  return null;
}

//... –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ä–æ–≥—É –∫—É—Ä—Å—ñ–≤ –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Å—É–º–∏, –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ—ó –≤ USD-W
function getRateTier(amount, from, to) {
  if (from === 'USDT' || to === 'USDT') {
    return getRateUsdtTier(amount, from, to);
  } else {
    return getRateRegularTier(amount, from);
  }
}
function getRateUsdtTier(amount, from, to) {
  let usdAmount = amount;

  const usdtTierName =
    amount <= 1000
      ? 'below_1k'
      : amount <= 10000
      ? 'between_1k_10k'
      : amount <= 50000
      ? 'between_10k_50k'
      : 'above_50k';

  const usdtTier = exchangeRates.usdt[usdtTierName];
  const usdtToUsdRate = usdtTier['USD-W']?.sell;
  const usdToUsdtRate = usdtTier['USD-W']?.buy;

  // üü¢ –Ø–∫—â–æ –æ–±–º—ñ–Ω –∑ USDT
  if (from === 'USDT' && usdtToUsdRate) {
    usdAmount = amount / usdtToUsdRate;
  }
  // üîµ –Ø–∫—â–æ –æ–±–º—ñ–Ω –Ω–∞ USDT
  else if (to === 'USDT' && usdToUsdtRate) {
    usdAmount = amount * usdToUsdtRate;
  }

  // –¥–∞–ª—ñ –ø—ñ–¥—Å—Ç–∞–≤–∏–º–æ tier –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ usdAmount
  if (usdAmount <= 1000)
    return { tier: exchangeRates.usdt.below_1k, usdAmount };
  if (usdAmount <= 10000)
    return { tier: exchangeRates.usdt.between_1k_10k, usdAmount };
  if (usdAmount <= 50000)
    return { tier: exchangeRates.usdt.between_10k_50k, usdAmount };
  return { tier: exchangeRates.usdt.above_50k, usdAmount };
}
function getRateRegularTier(amount, currency) {
  let usdAmount = amount;

  // üî∂ –û–±—Ä–æ–±–∫–∞ —ñ–Ω—à–∏—Ö –≤–∞–ª—é—Ç —á–µ—Ä–µ–∑ regular
  const directPair = `${currency}_USD-W`;
  const reversePair = `USD-W_${currency}`;
  const tier = exchangeRates.regular.below_1k;

  if (tier[directPair]) {
    usdAmount = amount * tier[directPair].buy;
  } else if (tier[reversePair]) {
    usdAmount = amount / tier[reversePair].sell;
  }

  // üî∑ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è regular tier
  if (usdAmount <= 1000)
    return { tier: exchangeRates.regular.below_1k, usdAmount };
  if (usdAmount <= 5000)
    return { tier: exchangeRates.regular.between_1k_5k, usdAmount };
  return { tier: exchangeRates.regular.above_5k, usdAmount };
}

//... –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏ –¥–æ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤–≤–µ–¥–µ–Ω–æ—ó —Å—É–º–∏
function calcExchangeFromGive(giveAmount, from, to) {
  if (!from || !to) return null;

  const { tier, usdAmount } = getRateTier(giveAmount, from, to);

  const rate = getRate(from, to, tier, 'buy', usdAmount);

  if (!rate) return null;

  //... –î–ª—è USDT -> UAH: –º–Ω–æ–∂–µ–Ω–Ω—è –Ω–∞ –∫—É—Ä—Å
  if (from === 'USDT' && to === 'UAH') {
    return giveAmount * rate;
  }
  //... –î–ª—è UAH -> USDT: –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –∫—É—Ä—Å
  if (from === 'UAH' && to === 'USDT') {
    return giveAmount / rate;
  }
  //... –î–ª—è USDT -> USD –∞–±–æ USD -> USDT: –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –∫—É—Ä—Å
  if (from === 'USDT' || to === 'USDT') {
    return giveAmount / rate;
  }

  //... –î–ª—è —ñ–Ω—à–∏—Ö –≤–∞–ª—é—Ç: –º–Ω–æ–∂–µ–Ω–Ω—è –Ω–∞ –∫—É—Ä—Å

  return giveAmount * rate;
}
//... –û–±—á–∏—Å–ª–µ–Ω–Ω—è —Å—É–º–∏ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –±–∞–∂–∞–Ω–æ—ó –æ—Ç—Ä–∏–º–∞–Ω–æ—ó —Å—É–º–∏
function calcExchangeFromReceive(receiveAmount, from, to) {
  if (!from || !to) return null;

  const { tier, usdAmount } = getRateTier(receiveAmount, to, from);

  const rate = getRate(from, to, tier, 'buy', usdAmount);

  if (!rate) return null;

  //... –î–ª—è USDT -> UAH: –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –∫—É—Ä—Å
  if (from === 'USDT' && to === 'UAH') {
    return receiveAmount / rate;
  }
  //... –î–ª—è UAH -> USDT: –º–Ω–æ–∂–µ–Ω–Ω—è –Ω–∞ –∫—É—Ä—Å
  if (from === 'UAH' && to === 'USDT') {
    return receiveAmount * rate;
  }
  //... –î–ª—è USDT -> USD –∞–±–æ USD -> USDT: –º–Ω–æ–∂–µ–Ω–Ω—è –Ω–∞ –∫—É—Ä—Å
  if (from === 'USDT' || to === 'USDT') {
    return receiveAmount * rate;
  }

  //... –î–ª—è —ñ–Ω—à–∏—Ö –≤–∞–ª—é—Ç: –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –∫—É—Ä—Å

  return receiveAmount / rate;
}

//*... –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —É –ø–æ–ª—ñ "–≤—ñ–¥–¥–∞—é"
function handleGiveInput() {
  formatInputValue(giveInput);

  const amount = parseValue(giveInput);
  const from = giveSelect.value;
  const to = receiveSelect.value;

  const result = calcExchangeFromGive(amount, from, to);
  receiveInput.value = amount !== 0 && result ? result.toFixed(2) : '';

  updateExchangeRates();
}
//*... –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è —Å—É–º–∏ —É –ø–æ–ª—ñ "–æ—Ç—Ä–∏–º—É—é"
function handleReceiveInput() {
  formatInputValue(receiveInput);

  const amount = parseValue(receiveInput);
  const from = giveSelect.value;
  const to = receiveSelect.value;

  const result = calcExchangeFromReceive(amount, from, to);
  giveInput.value = amount !== 0 && result ? result.toFixed(2) : '';

  updateExchangeRates();
}

//* –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç
function updateExchangeRates() {
  if (!giveSelect || !receiveSelect) return;

  const from = giveSelect.value;
  const to = receiveSelect.value;
  const amount = parseValue(giveInput);

  // ‚¨ÖÔ∏è Tier –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∫—É—Ä—Å—É
  const { tier: directTier, usdAmount: usdAmountBuy } = getRateTier(
    amount,
    from,
    to
  );
  const directRate = getRate(from, to, directTier, 'buy', usdAmountBuy);

  // ‚û°Ô∏è Tier –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∫—É—Ä—Å—É
  const { tier: reverseTier, usdAmount: usdAmountSell } = getRateTier(
    amount,
    to,
    from
  );
  const inverseRate = getRate(to, from, reverseTier, 'sell', usdAmountSell);

  let formattedDirect, formattedInverse;

  if (from === 'USDT' || to === 'USDT') {
    // üîÑ USDT: –ø–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–≤–µ—Ä—Å–Ω–æ, –±–æ –±–∞–∑–∞ ‚Äì USD
    formattedDirect = (1 / directRate).toFixed(4);
    formattedInverse = (1 / inverseRate).toFixed(4);
  } else {
    formattedDirect = directRate.toFixed(4);
    formattedInverse = inverseRate.toFixed(4);
  }

  calcCourses.innerHTML = `
    <p>1 ${from} = ${formattedDirect} ${to}</p>
    <p>1 ${to} = ${formattedInverse} ${from}</p>
  `;
}

//* –û–±—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç –º—ñ–∂ –ø–æ–ª—è–º–∏
function handleToggle() {
  delDisableSelect();

  const tempValue = giveSelect.value;
  giveSelect.tomselect.setValue(receiveSelect.value);
  receiveSelect.tomselect.setValue(tempValue);

  const tempInput = giveInput.value;
  giveInput.value = receiveInput.value;
  receiveInput.value = tempInput;

  handleGiveInput();
  addDisableSelect();
}

//! –û–±—Ä–æ–±–∫–∞ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ—ó –æ–±—Ä–æ–±–∫–∏ –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
export function handleExchangeData() {
  // calcExchangeFromGive(); // –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –∫—É—Ä—Å—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å

  const giveCurrency = giveSelect.selectedOptions[0].value.trim();
  const receiveCurrency = receiveSelect.selectedOptions[0].value.trim();
  const giveAmount = parseFloat(giveInput.value) || 0;
  const receiveAmount = parseFloat(receiveInput.value) || 0;
  const directRate = (getGive(giveSelect) / getReceive(receiveSelect)).toFixed(
    4
  );
  const inverseRate = (getReceive(receiveSelect) / getGive(giveSelect)).toFixed(
    4
  );

  return {
    currencyExchange: `${giveCurrency} = ${giveAmount}`,
    currencyReceived: `${receiveCurrency} = ${receiveAmount}`,
    reverseCourse: `${giveCurrency} = ${directRate} ${receiveCurrency}; ${receiveCurrency} = ${inverseRate} ${giveCurrency}`,
  };
}

//? –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç–∏ –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä—ñ
export function addDisableSelect() {
  const giveValue = giveSelect.tomselect.getValue();
  const receiveValue = receiveSelect.tomselect.getValue();

  const dropdownGiveSelect = giveSelect.tomselect.dropdown_content;
  const dropdownReceiveSelect = receiveSelect.tomselect.dropdown_content;

  // –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ –∫–ª–∞—Å–∏
  dropdownGiveSelect
    .querySelectorAll('[data-value]')
    .forEach(option => option.classList.remove('noSelect'));
  dropdownReceiveSelect
    .querySelectorAll('[data-value]')
    .forEach(option => option.classList.remove('noSelect'));

  // üëâ –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–µ–∞–ª—å–Ω—É –º–∞–ø—É –ø–∞—Ä –Ω–∞ –æ—Å–Ω–æ–≤—ñ exchangeRates
  const getValidPairs = () => {
    const pairs = new Map();

    const addPair = (from, to) => {
      if (!pairs.has(from)) pairs.set(from, new Set());
      pairs.get(from).add(to);
    };

    const tiers = [
      exchangeRates.regular.below_1k,
      exchangeRates.regular.between_1k_5k,
      exchangeRates.regular.above_5k,
    ];

    for (const tier of tiers) {
      for (const pairKey in tier) {
        const [from, to] = pairKey.split('_');
        addPair(from, to);
        addPair(to, from); // –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–º–∫—É
      }
    }

    const usdtTiers = Object.values(exchangeRates.usdt);
    for (const tier of usdtTiers) {
      for (const to in tier) {
        addPair('USDT', to);
        addPair(to, 'USDT');
      }
    }

    return pairs;
  };

  const validPairs = getValidPairs();

  // ‚ö†Ô∏è –ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ –≤–∏–±—ñ—Ä –æ–¥–Ω–∞–∫–æ–≤–∏—Ö –≤–∞–ª—é—Ç
  if (receiveValue) {
    const el = dropdownGiveSelect.querySelector(
      `[data-value="${receiveValue}"]`
    );
    if (el) el.classList.add('noSelect');
  }
  if (giveValue) {
    const el = dropdownReceiveSelect.querySelector(
      `[data-value="${giveValue}"]`
    );
    if (el) el.classList.add('noSelect');
  }

  // ‚ùå –í–∏–º–∫–Ω—É—Ç–∏ —Ç—ñ –æ–ø—Ü—ñ—ó, —è–∫—ñ –Ω–µ –º–∞—é—Ç—å –≤–∞–ª—ñ–¥–Ω–∏—Ö –ø–∞—Ä
  dropdownGiveSelect.querySelectorAll('[data-value]').forEach(option => {
    const currency = option.dataset.value;
    if (
      !validPairs.has(currency) ||
      (receiveValue && !validPairs.get(currency)?.has(receiveValue))
    ) {
      option.classList.add('noSelect');
    }
  });

  dropdownReceiveSelect.querySelectorAll('[data-value]').forEach(option => {
    const currency = option.dataset.value;
    if (
      !validPairs.has(giveValue) ||
      (giveValue && !validPairs.get(giveValue)?.has(currency))
    ) {
      option.classList.add('noSelect');
    }
  });
}

//* –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∑ –≤–∏–±–æ—Ä—É –≤–∞–ª—é—Ç
export function delDisableSelect() {
  const dropdownGiveOptions =
    giveSelect.tomselect.dropdown_content.querySelectorAll('[data-value]');
  const dropdownReceiveOptions =
    receiveSelect.tomselect.dropdown_content.querySelectorAll('[data-value]');

  dropdownGiveOptions?.forEach(option => {
    option.classList.remove('noSelect');
  });

  dropdownReceiveOptions?.forEach(option => {
    option.classList.remove('noSelect');
  });
}

giveInput?.addEventListener('input', () => {
  debounceCalculation(handleGiveInput);
});
receiveInput?.addEventListener('input', () => {
  debounceCalculation(handleReceiveInput);
});

giveSelect?.addEventListener('change', () => {
  debounceCalculation(handleGiveInput);
});
receiveSelect?.addEventListener('change', () => {
  debounceCalculation(handleGiveInput);
});

calcToggle?.addEventListener('click', handleToggle);
calcAdd?.addEventListener('click', handleGiveInput);

document.addEventListener('DOMContentLoaded', () => {
  debounceCalculation(handleGiveInput);
});
